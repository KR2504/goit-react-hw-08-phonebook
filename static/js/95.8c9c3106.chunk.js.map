{"version":3,"file":"static/js/95.8c9c3106.chunk.js","mappings":"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","sources":["components/Section.jsx","webpack://goit-react-hw-08-phonebook/./src/components/styles/styles.module.css?87fd","components/ContactForm.jsx","components/ContactsList.jsx","components/Filter.jsx","pages/ContactsPage.jsx","../node_modules/shortid/index.js","../node_modules/shortid/lib/alphabet.js","../node_modules/shortid/lib/build.js","../node_modules/shortid/lib/generate.js","../node_modules/shortid/lib/index.js","../node_modules/shortid/lib/is-valid.js","../node_modules/shortid/lib/random/random-byte-browser.js","../node_modules/shortid/lib/random/random-from-seed.js","../node_modules/shortid/lib/util/cluster-worker-id-browser.js","../node_modules/shortid/node_modules/nanoid/format.browser.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Section = ({ title, children }) => (\n    <section>\n        {title && <h2>{title}</h2>}\n        {children}\n    </section>\n);\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired,\n};\n\nexport default Section;\n    \n","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"styles_label__tX+Yt\"};","import { useState } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport shortid from \"shortid\";\nimport styles from \"./styles/styles.module.css\";\nimport { contactsOperations, contactsSelectors } from \"../redux/contacts\";\n\nexport default function Form() {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n    const dispatch = useDispatch();\n    const contacts = useSelector(contactsSelectors.getContacts);\n    \nconst nameInputId = shortid.generate();\n\n    const handleChange = e => {\n        const { name, value } = e.currentTarget;\n        if (name === 'name') {\n            setName(value)\n        }\n        if (name === 'number') {\n            setNumber(value)\n        }\n    };\n\n    const handleAddContact = e => {\n        e.preventDefault();\n        setContact({\n            id: shortid.generate(),\n            name,\n            number\n        });\n        setName('');\n        setNumber('');\n    };\n\n    const setContact = value => {\n        if (contacts?.every(({ name }) =>\n            name.toLowerCase() !== value.name.toLowerCase())) {\n            dispatch(contactsOperations.addContact(value))\n        } else {\n            alert(`${value.name} is already in contacts`);\n        }\n    };\n\n    return (\n        <form onSubmit={handleAddContact}>\n            <label htmlFor={nameInputId} className={styles.label}>\n                Name\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    value={name}\n                    onChange={handleChange}\n                    id={nameInputId}\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                />\n            </label>\n            <label htmlFor={nameInputId} className={styles.label}>\n                Number\n                <input\n                    type=\"tel\"\n                    name=\"number\"\n                    value={number}\n                    onChange={handleChange}\n                    id={nameInputId}\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                />\n            </label>\n            <button type=\"submit\">Add contacts</button>\n        </form>\n    );\n};","import React from \"react\";\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { contactsOperations, contactsSelectors } from \"../redux/contacts\";\n\nconst Contacts = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(state => state.filter.value);\n    const contacts = useSelector(contactsSelectors.getContacts);\n    const filteredContacts = filter?.length ? contacts?.filter(({name}) =>\n        name.toLowerCase().includes(filter.toLowerCase())) : contacts;\n    \n    useEffect(() => {\n        dispatch(contactsOperations.fetchContacts())\n    }, [dispatch]);\n    \n    return (\n        <ul>\n            {contacts?.length ? filteredContacts?.map(({ name, id, number }) => {\n                return (\n                    <li key={id}>{name}: {number} <button onClick={() => dispatch(contactsOperations.deleteContact(id))}>Delete</button></li>\n                    \n                )\n            }): <span>Phonebook empty!</span>}\n        </ul>\n    );\n};\n\nexport default Contacts;","import React from \"react\";\n// import PropTypes from \"prop-types\";\nimport styles from \"./styles/styles.module.css\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setFilter } from \"../redux/filter\";\nconst Filter = () => {\n    const dispatch = useDispatch();\n\n    const value = useSelector(state => state.filter.value);\n\n    const handleChangeFilter = e => (\n        dispatch(setFilter(e.target.value))\n    );\n\n    return (\n        <label className = {styles.label}>\n        Find contacts by name\n        <input\n            type=\"text\"\n            value={value}\n            onChange={handleChangeFilter}\n        />\n    </label>\n    )\n};\n\n// Filter.propTypes = {\n//     value: PropTypes.string.isRequired,\n//     onChange: PropTypes.func.isRequired,\n// };\n\nexport default Filter;","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Section from \"../components/Section\";\nimport ContactForm from '../components/ContactForm';\nimport Contacts from '../components/ContactsList';\nimport Filter from \"../components/Filter\";\nimport { contactsOperations, contactsSelectors } from \"../redux/contacts\";\n\n\nconst barStyles = {\n    paddingLeft: 600,\n    marginTop: 100,\n};\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(contactsSelectors.getIsLoading);\n\n\n    useEffect(() => {\n        dispatch(contactsOperations.fetchContacts())\n    }, [dispatch]);\n\n    return (\n        <div style={barStyles}>\n            <Section title=\"Phonebook\">\n                <ContactForm />\n            </Section>\n\n            <Section title=\"Contacts\">\n                {isLoading && <h1>Loading...</h1> }\n                <Filter />\n                <Contacts />\n            </Section>\n        </div>\n    );\n}","'use strict';\nmodule.exports = require('./lib/index');\n","'use strict';\n\nvar randomFromSeed = require('./random/random-from-seed');\n\nvar ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';\nvar alphabet;\nvar previousSeed;\n\nvar shuffled;\n\nfunction reset() {\n    shuffled = false;\n}\n\nfunction setCharacters(_alphabet_) {\n    if (!_alphabet_) {\n        if (alphabet !== ORIGINAL) {\n            alphabet = ORIGINAL;\n            reset();\n        }\n        return;\n    }\n\n    if (_alphabet_ === alphabet) {\n        return;\n    }\n\n    if (_alphabet_.length !== ORIGINAL.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);\n    }\n\n    var unique = _alphabet_.split('').filter(function(item, ind, arr){\n       return ind !== arr.lastIndexOf(item);\n    });\n\n    if (unique.length) {\n        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));\n    }\n\n    alphabet = _alphabet_;\n    reset();\n}\n\nfunction characters(_alphabet_) {\n    setCharacters(_alphabet_);\n    return alphabet;\n}\n\nfunction setSeed(seed) {\n    randomFromSeed.seed(seed);\n    if (previousSeed !== seed) {\n        reset();\n        previousSeed = seed;\n    }\n}\n\nfunction shuffle() {\n    if (!alphabet) {\n        setCharacters(ORIGINAL);\n    }\n\n    var sourceArray = alphabet.split('');\n    var targetArray = [];\n    var r = randomFromSeed.nextValue();\n    var characterIndex;\n\n    while (sourceArray.length > 0) {\n        r = randomFromSeed.nextValue();\n        characterIndex = Math.floor(r * sourceArray.length);\n        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);\n    }\n    return targetArray.join('');\n}\n\nfunction getShuffled() {\n    if (shuffled) {\n        return shuffled;\n    }\n    shuffled = shuffle();\n    return shuffled;\n}\n\n/**\n * lookup shuffled letter\n * @param index\n * @returns {string}\n */\nfunction lookup(index) {\n    var alphabetShuffled = getShuffled();\n    return alphabetShuffled[index];\n}\n\nfunction get () {\n  return alphabet || ORIGINAL;\n}\n\nmodule.exports = {\n    get: get,\n    characters: characters,\n    seed: setSeed,\n    lookup: lookup,\n    shuffled: getShuffled\n};\n","'use strict';\n\nvar generate = require('./generate');\nvar alphabet = require('./alphabet');\n\n// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.\n// This number should be updated every year or so to keep the generated id short.\n// To regenerate `new Date() - 0` and bump the version. Always bump the version!\nvar REDUCE_TIME = 1567752802062;\n\n// don't change unless we change the algos or REDUCE_TIME\n// must be an integer and less than 16\nvar version = 7;\n\n// Counter is used when shortid is called multiple times in one second.\nvar counter;\n\n// Remember the last time shortid was called in case counter is needed.\nvar previousSeconds;\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction build(clusterWorkerId) {\n    var str = '';\n\n    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);\n\n    if (seconds === previousSeconds) {\n        counter++;\n    } else {\n        counter = 0;\n        previousSeconds = seconds;\n    }\n\n    str = str + generate(version);\n    str = str + generate(clusterWorkerId);\n    if (counter > 0) {\n        str = str + generate(counter);\n    }\n    str = str + generate(seconds);\n    return str;\n}\n\nmodule.exports = build;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar random = require('./random/random-byte');\nvar format = require('nanoid/format');\n\nfunction generate(number) {\n    var loopCounter = 0;\n    var done;\n\n    var str = '';\n\n    while (!done) {\n        str = str + format(random, alphabet.get(), 1);\n        done = number < (Math.pow(16, loopCounter + 1 ) );\n        loopCounter++;\n    }\n    return str;\n}\n\nmodule.exports = generate;\n","'use strict';\n\nvar alphabet = require('./alphabet');\nvar build = require('./build');\nvar isValid = require('./is-valid');\n\n// if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n\n/**\n * Set the seed.\n * Highly recommended if you don't want people to try to figure out your id schema.\n * exposed as shortid.seed(int)\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\n */\nfunction seed(seedValue) {\n    alphabet.seed(seedValue);\n    return module.exports;\n}\n\n/**\n * Set the cluster worker or machine id\n * exposed as shortid.worker(int)\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\n * returns shortid module so it can be chained.\n */\nfunction worker(workerId) {\n    clusterWorkerId = workerId;\n    return module.exports;\n}\n\n/**\n *\n * sets new characters to use in the alphabet\n * returns the shuffled alphabet\n */\nfunction characters(newCharacters) {\n    if (newCharacters !== undefined) {\n        alphabet.characters(newCharacters);\n    }\n\n    return alphabet.shuffled();\n}\n\n/**\n * Generate unique id\n * Returns string id\n */\nfunction generate() {\n  return build(clusterWorkerId);\n}\n\n// Export all other functions as properties of the generate function\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;\n","'use strict';\nvar alphabet = require('./alphabet');\n\nfunction isShortId(id) {\n    if (!id || typeof id !== 'string' || id.length < 6 ) {\n        return false;\n    }\n\n    var nonAlphabetic = new RegExp('[^' +\n      alphabet.get().replace(/[|\\\\{}()[\\]^$+*?.-]/g, '\\\\$&') +\n    ']');\n    return !nonAlphabetic.test(id);\n}\n\nmodule.exports = isShortId;\n","'use strict';\n\nvar crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto\n\nvar randomByte;\n\nif (!crypto || !crypto.getRandomValues) {\n    randomByte = function(size) {\n        var bytes = [];\n        for (var i = 0; i < size; i++) {\n            bytes.push(Math.floor(Math.random() * 256));\n        }\n        return bytes;\n    };\n} else {\n    randomByte = function(size) {\n        return crypto.getRandomValues(new Uint8Array(size));\n    };\n}\n\nmodule.exports = randomByte;\n","'use strict';\n\n// Found this seed-based random generator somewhere\n// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)\n\nvar seed = 1;\n\n/**\n * return a random number based on a seed\n * @param seed\n * @returns {number}\n */\nfunction getNextValue() {\n    seed = (seed * 9301 + 49297) % 233280;\n    return seed/(233280.0);\n}\n\nfunction setSeed(_seed_) {\n    seed = _seed_;\n}\n\nmodule.exports = {\n    nextValue: getNextValue,\n    seed: setSeed\n};\n","'use strict';\n\nmodule.exports = 0;\n","// This file replaces `format.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nmodule.exports = function (random, alphabet, size) {\n  // We can’t use bytes bigger than the alphabet. To make bytes values closer\n  // to the alphabet, we apply bitmask on them. We look for the closest\n  // `2 ** x - 1` number, which will be bigger than alphabet size. If we have\n  // 30 symbols in the alphabet, we will take 31 (00011111).\n  // We do not use faster Math.clz32, because it is not available in browsers.\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\n  // Bitmask is not a perfect solution (in our example it will pass 31 bytes,\n  // which is bigger than the alphabet). As a result, we will need more bytes,\n  // than ID size, because we will refuse bytes bigger than the alphabet.\n\n  // Every hardware random generator call is costly,\n  // because we need to wait for entropy collection. This is why often it will\n  // be faster to ask for few extra bytes in advance, to avoid additional calls.\n\n  // Here we calculate how many random bytes should we call in advance.\n  // It depends on ID length, mask / alphabet size and magic number 1.6\n  // (which was selected according benchmarks).\n\n  // -~f => Math.ceil(f) if n is float number\n  // -~i => i + 1 if n is integer number\n  var step = -~(1.6 * mask * size / alphabet.length)\n  var id = ''\n\n  while (true) {\n    var bytes = random(step)\n    // Compact alternative for `for (var i = 0; i < step; i++)`\n    var i = step\n    while (i--) {\n      // If random byte is bigger than alphabet even after bitmask,\n      // we refuse it by `|| ''`.\n      id += alphabet[bytes[i] & mask] || ''\n      // More compact than `id.length + 1 === size`\n      if (id.length === +size) return id\n    }\n  }\n}\n"],"names":["title","children","Form","useState","name","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","contactsSelectors","nameInputId","shortid","handleChange","e","currentTarget","value","setContact","every","toLowerCase","contactsOperations","alert","onSubmit","preventDefault","id","htmlFor","className","styles","type","onChange","pattern","required","filter","state","filteredContacts","length","includes","useEffect","map","onClick","setFilter","target","barStyles","paddingLeft","marginTop","ContactsPage","isLoading","style","module","exports","alphabet","previousSeed","shuffled","randomFromSeed","require","ORIGINAL","reset","setCharacters","_alphabet_","Error","unique","split","item","ind","arr","lastIndexOf","join","getShuffled","characterIndex","sourceArray","targetArray","r","nextValue","Math","floor","push","splice","shuffle","get","characters","seed","lookup","index","counter","previousSeconds","generate","clusterWorkerId","str","seconds","Date","now","random","format","done","loopCounter","pow","build","isValid","seedValue","worker","workerId","newCharacters","undefined","RegExp","replace","test","randomByte","crypto","window","msCrypto","getRandomValues","size","Uint8Array","bytes","i","_seed_","mask","log","LN2","step"],"sourceRoot":""}